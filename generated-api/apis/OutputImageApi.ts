/* tslint:disable */
/* eslint-disable */
/**
 * Skill Climbing
 * スキルの積み上げアプリ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OutputImagesAttachRequestBody,
  OutputsImagesUploadUrl,
  OutputsOutput,
} from '../models';
import {
    OutputImagesAttachRequestBodyFromJSON,
    OutputImagesAttachRequestBodyToJSON,
    OutputsImagesUploadUrlFromJSON,
    OutputsImagesUploadUrlToJSON,
    OutputsOutputFromJSON,
    OutputsOutputToJSON,
} from '../models';

export interface ApiV1OutputsImagesAttachRequest {
    outputId: number;
    outputImagesAttachRequestBody: OutputImagesAttachRequestBody;
}

export interface ApiV1OutputsImagesUploadUrlRequest {
    outputId: number;
    filename: string;
    byteSize: number;
    contentType: string;
}

/**
 * 
 */
export class OutputImageApi extends runtime.BaseAPI {

    /**
     * アウトプット画像登録
     */
    async apiV1OutputsImagesAttachRaw(requestParameters: ApiV1OutputsImagesAttachRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OutputsOutput>> {
        if (requestParameters.outputId === null || requestParameters.outputId === undefined) {
            throw new runtime.RequiredError('outputId','Required parameter requestParameters.outputId was null or undefined when calling apiV1OutputsImagesAttach.');
        }

        if (requestParameters.outputImagesAttachRequestBody === null || requestParameters.outputImagesAttachRequestBody === undefined) {
            throw new runtime.RequiredError('outputImagesAttachRequestBody','Required parameter requestParameters.outputImagesAttachRequestBody was null or undefined when calling apiV1OutputsImagesAttach.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/outputs/{output_id}/images/attach`.replace(`{${"output_id"}}`, encodeURIComponent(String(requestParameters.outputId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OutputImagesAttachRequestBodyToJSON(requestParameters.outputImagesAttachRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OutputsOutputFromJSON(jsonValue));
    }

    /**
     * アウトプット画像登録
     */
    async apiV1OutputsImagesAttach(requestParameters: ApiV1OutputsImagesAttachRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OutputsOutput> {
        const response = await this.apiV1OutputsImagesAttachRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * アウトプット画像アップロードURL取得
     */
    async apiV1OutputsImagesUploadUrlRaw(requestParameters: ApiV1OutputsImagesUploadUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OutputsImagesUploadUrl>> {
        if (requestParameters.outputId === null || requestParameters.outputId === undefined) {
            throw new runtime.RequiredError('outputId','Required parameter requestParameters.outputId was null or undefined when calling apiV1OutputsImagesUploadUrl.');
        }

        if (requestParameters.filename === null || requestParameters.filename === undefined) {
            throw new runtime.RequiredError('filename','Required parameter requestParameters.filename was null or undefined when calling apiV1OutputsImagesUploadUrl.');
        }

        if (requestParameters.byteSize === null || requestParameters.byteSize === undefined) {
            throw new runtime.RequiredError('byteSize','Required parameter requestParameters.byteSize was null or undefined when calling apiV1OutputsImagesUploadUrl.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling apiV1OutputsImagesUploadUrl.');
        }

        const queryParameters: any = {};

        if (requestParameters.filename !== undefined) {
            queryParameters['filename'] = requestParameters.filename;
        }

        if (requestParameters.byteSize !== undefined) {
            queryParameters['byte_size'] = requestParameters.byteSize;
        }

        if (requestParameters.contentType !== undefined) {
            queryParameters['content_type'] = requestParameters.contentType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/outputs/{output_id}/images/upload_url`.replace(`{${"output_id"}}`, encodeURIComponent(String(requestParameters.outputId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OutputsImagesUploadUrlFromJSON(jsonValue));
    }

    /**
     * アウトプット画像アップロードURL取得
     */
    async apiV1OutputsImagesUploadUrl(requestParameters: ApiV1OutputsImagesUploadUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OutputsImagesUploadUrl> {
        const response = await this.apiV1OutputsImagesUploadUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
