/* tslint:disable */
/* eslint-disable */
/**
 * Skill Climbing
 * スキルの積み上げアプリ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OutputCommentCreateRequestBody,
  OutputsCommentsComment,
  OutputsCommentsCommentListInner,
} from '../models';
import {
    OutputCommentCreateRequestBodyFromJSON,
    OutputCommentCreateRequestBodyToJSON,
    OutputsCommentsCommentFromJSON,
    OutputsCommentsCommentToJSON,
    OutputsCommentsCommentListInnerFromJSON,
    OutputsCommentsCommentListInnerToJSON,
} from '../models';

export interface ApiV1OutputsCommentsCreateRequest {
    outputId: number;
    outputCommentCreateRequestBody: OutputCommentCreateRequestBody;
}

export interface ApiV1OutputsCommentsDestroyRequest {
    outputId: number;
    outputCommentId: number;
}

export interface ApiV1OutputsCommentsIndexRequest {
    outputId: number;
}

/**
 * 
 */
export class OutputCommentApi extends runtime.BaseAPI {

    /**
     * アウトプットコメント作成
     */
    async apiV1OutputsCommentsCreateRaw(requestParameters: ApiV1OutputsCommentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OutputsCommentsComment>> {
        if (requestParameters.outputId === null || requestParameters.outputId === undefined) {
            throw new runtime.RequiredError('outputId','Required parameter requestParameters.outputId was null or undefined when calling apiV1OutputsCommentsCreate.');
        }

        if (requestParameters.outputCommentCreateRequestBody === null || requestParameters.outputCommentCreateRequestBody === undefined) {
            throw new runtime.RequiredError('outputCommentCreateRequestBody','Required parameter requestParameters.outputCommentCreateRequestBody was null or undefined when calling apiV1OutputsCommentsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/outputs/{output_id}/comments`.replace(`{${"output_id"}}`, encodeURIComponent(String(requestParameters.outputId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OutputCommentCreateRequestBodyToJSON(requestParameters.outputCommentCreateRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OutputsCommentsCommentFromJSON(jsonValue));
    }

    /**
     * アウトプットコメント作成
     */
    async apiV1OutputsCommentsCreate(requestParameters: ApiV1OutputsCommentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OutputsCommentsComment> {
        const response = await this.apiV1OutputsCommentsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * アウトプットのコメント削除API
     */
    async apiV1OutputsCommentsDestroyRaw(requestParameters: ApiV1OutputsCommentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.outputId === null || requestParameters.outputId === undefined) {
            throw new runtime.RequiredError('outputId','Required parameter requestParameters.outputId was null or undefined when calling apiV1OutputsCommentsDestroy.');
        }

        if (requestParameters.outputCommentId === null || requestParameters.outputCommentId === undefined) {
            throw new runtime.RequiredError('outputCommentId','Required parameter requestParameters.outputCommentId was null or undefined when calling apiV1OutputsCommentsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/outputs/{output_id}/comments/{output_comment_id}`.replace(`{${"output_id"}}`, encodeURIComponent(String(requestParameters.outputId))).replace(`{${"output_comment_id"}}`, encodeURIComponent(String(requestParameters.outputCommentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * アウトプットのコメント削除API
     */
    async apiV1OutputsCommentsDestroy(requestParameters: ApiV1OutputsCommentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OutputsCommentsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * アウトプットのコメント一覧
     */
    async apiV1OutputsCommentsIndexRaw(requestParameters: ApiV1OutputsCommentsIndexRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OutputsCommentsCommentListInner>>> {
        if (requestParameters.outputId === null || requestParameters.outputId === undefined) {
            throw new runtime.RequiredError('outputId','Required parameter requestParameters.outputId was null or undefined when calling apiV1OutputsCommentsIndex.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/outputs/{output_id}/comments`.replace(`{${"output_id"}}`, encodeURIComponent(String(requestParameters.outputId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OutputsCommentsCommentListInnerFromJSON));
    }

    /**
     * アウトプットのコメント一覧
     */
    async apiV1OutputsCommentsIndex(requestParameters: ApiV1OutputsCommentsIndexRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OutputsCommentsCommentListInner>> {
        const response = await this.apiV1OutputsCommentsIndexRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
