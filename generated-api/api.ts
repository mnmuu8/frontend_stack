/* tslint:disable */
/* eslint-disable */
/**
 * Skill Climbing
 * スキルの積み上げアプリ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface SkillsSkill
 */
export interface SkillsSkill {
    /**
     * スキルID
     * @type {number}
     * @memberof SkillsSkill
     */
    'id': number;
    /**
     * スキル名
     * @type {string}
     * @memberof SkillsSkill
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof SkillsSkill
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof SkillsSkill
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface StacksCreateRequestBody
 */
export interface StacksCreateRequestBody {
    /**
     * 積み上げタイトル
     * @type {string}
     * @memberof StacksCreateRequestBody
     */
    'title': string;
    /**
     * 積み上げ時間
     * @type {number}
     * @memberof StacksCreateRequestBody
     */
    'minutes': number;
    /**
     * スキルID
     * @type {number}
     * @memberof StacksCreateRequestBody
     */
    'skill_id': number;
    /**
     * 積み上げ内容
     * @type {string}
     * @memberof StacksCreateRequestBody
     */
    'description': string | null;
    /**
     * 
     * @type {string}
     * @memberof StacksCreateRequestBody
     */
    'stacked_at': string;
}
/**
 * 
 * @export
 * @interface StacksStack
 */
export interface StacksStack {
    /**
     * 積み上げID
     * @type {number}
     * @memberof StacksStack
     */
    'id': number;
    /**
     * 積み上げタイトル
     * @type {string}
     * @memberof StacksStack
     */
    'title': string;
    /**
     * 積み上げ時間
     * @type {number}
     * @memberof StacksStack
     */
    'minutes': number;
    /**
     * 
     * @type {StacksStackSkill}
     * @memberof StacksStack
     */
    'skill': StacksStackSkill;
    /**
     * 積み上げ内容
     * @type {string}
     * @memberof StacksStack
     */
    'description': string | null;
    /**
     * 
     * @type {string}
     * @memberof StacksStack
     */
    'stacked_at': string;
    /**
     * 
     * @type {string}
     * @memberof StacksStack
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof StacksStack
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface StacksStackListInner
 */
export interface StacksStackListInner {
    /**
     * スキルID
     * @type {number}
     * @memberof StacksStackListInner
     */
    'id': number;
    /**
     * スキル名
     * @type {string}
     * @memberof StacksStackListInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof StacksStackListInner
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof StacksStackListInner
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface StacksStackSkill
 */
export interface StacksStackSkill {
    /**
     * スキルID
     * @type {number}
     * @memberof StacksStackSkill
     */
    'id': number;
    /**
     * スキル名
     * @type {string}
     * @memberof StacksStackSkill
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof StacksStackSkill
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof StacksStackSkill
     */
    'updated_at': string;
}

/**
 * SkillApi - axios parameter creator
 * @export
 */
export const SkillApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary スキルマスタデータ取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SkillsIndex: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/skills`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SkillApi - functional programming interface
 * @export
 */
export const SkillApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SkillApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary スキルマスタデータ取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SkillsIndex(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StacksStackListInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SkillsIndex(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SkillApi - factory interface
 * @export
 */
export const SkillApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SkillApiFp(configuration)
    return {
        /**
         * 
         * @summary スキルマスタデータ取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SkillsIndex(options?: any): AxiosPromise<Array<StacksStackListInner>> {
            return localVarFp.apiV1SkillsIndex(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SkillApi - object-oriented interface
 * @export
 * @class SkillApi
 * @extends {BaseAPI}
 */
export class SkillApi extends BaseAPI {
    /**
     * 
     * @summary スキルマスタデータ取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillApi
     */
    public apiV1SkillsIndex(options?: AxiosRequestConfig) {
        return SkillApiFp(this.configuration).apiV1SkillsIndex(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StackApi - axios parameter creator
 * @export
 */
export const StackApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 積み上げ作成
         * @param {StacksCreateRequestBody} stacksCreateRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1StacksCreate: async (stacksCreateRequestBody: StacksCreateRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stacksCreateRequestBody' is not null or undefined
            assertParamExists('apiV1StacksCreate', 'stacksCreateRequestBody', stacksCreateRequestBody)
            const localVarPath = `/api/v1/stacks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(stacksCreateRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 積み上げ一覧
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1StacksIndex: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/stacks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StackApi - functional programming interface
 * @export
 */
export const StackApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StackApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 積み上げ作成
         * @param {StacksCreateRequestBody} stacksCreateRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1StacksCreate(stacksCreateRequestBody: StacksCreateRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StacksStack>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1StacksCreate(stacksCreateRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 積み上げ一覧
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1StacksIndex(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StacksStackListInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1StacksIndex(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StackApi - factory interface
 * @export
 */
export const StackApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StackApiFp(configuration)
    return {
        /**
         * 
         * @summary 積み上げ作成
         * @param {StacksCreateRequestBody} stacksCreateRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1StacksCreate(stacksCreateRequestBody: StacksCreateRequestBody, options?: any): AxiosPromise<StacksStack> {
            return localVarFp.apiV1StacksCreate(stacksCreateRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 積み上げ一覧
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1StacksIndex(options?: any): AxiosPromise<Array<StacksStackListInner>> {
            return localVarFp.apiV1StacksIndex(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StackApi - object-oriented interface
 * @export
 * @class StackApi
 * @extends {BaseAPI}
 */
export class StackApi extends BaseAPI {
    /**
     * 
     * @summary 積み上げ作成
     * @param {StacksCreateRequestBody} stacksCreateRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StackApi
     */
    public apiV1StacksCreate(stacksCreateRequestBody: StacksCreateRequestBody, options?: AxiosRequestConfig) {
        return StackApiFp(this.configuration).apiV1StacksCreate(stacksCreateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 積み上げ一覧
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StackApi
     */
    public apiV1StacksIndex(options?: AxiosRequestConfig) {
        return StackApiFp(this.configuration).apiV1StacksIndex(options).then((request) => request(this.axios, this.basePath));
    }
}


