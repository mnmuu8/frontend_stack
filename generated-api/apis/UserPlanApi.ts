/* tslint:disable */
/* eslint-disable */
/**
 * Skill Climbing
 * スキルの積み上げアプリ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UserPlanCreateRequestBody,
  UserPlanUpdateRequestBody,
  UsersPlansPlan,
  UsersPlansPlanListInner,
} from '../models';
import {
    UserPlanCreateRequestBodyFromJSON,
    UserPlanCreateRequestBodyToJSON,
    UserPlanUpdateRequestBodyFromJSON,
    UserPlanUpdateRequestBodyToJSON,
    UsersPlansPlanFromJSON,
    UsersPlansPlanToJSON,
    UsersPlansPlanListInnerFromJSON,
    UsersPlansPlanListInnerToJSON,
} from '../models';

export interface ApiV1UsersPlansCreateRequest {
    userId: number;
    userPlanCreateRequestBody: UserPlanCreateRequestBody;
}

export interface ApiV1UsersPlansIndexRequest {
    userId: number;
    dateFrom?: Date;
    dateTo?: Date;
}

export interface ApiV1UsersPlansUpdateRequest {
    userId: number;
    planId: number;
    userPlanUpdateRequestBody: UserPlanUpdateRequestBody;
}

/**
 * 
 */
export class UserPlanApi extends runtime.BaseAPI {

    /**
     * 計画作成
     */
    async apiV1UsersPlansCreateRaw(requestParameters: ApiV1UsersPlansCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersPlansPlan>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling apiV1UsersPlansCreate.');
        }

        if (requestParameters.userPlanCreateRequestBody === null || requestParameters.userPlanCreateRequestBody === undefined) {
            throw new runtime.RequiredError('userPlanCreateRequestBody','Required parameter requestParameters.userPlanCreateRequestBody was null or undefined when calling apiV1UsersPlansCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{user_id}/plans`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserPlanCreateRequestBodyToJSON(requestParameters.userPlanCreateRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersPlansPlanFromJSON(jsonValue));
    }

    /**
     * 計画作成
     */
    async apiV1UsersPlansCreate(requestParameters: ApiV1UsersPlansCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersPlansPlan> {
        const response = await this.apiV1UsersPlansCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 計画一覧
     */
    async apiV1UsersPlansIndexRaw(requestParameters: ApiV1UsersPlansIndexRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: Array<Array<UsersPlansPlanListInner>>; }>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling apiV1UsersPlansIndex.');
        }

        const queryParameters: any = {};

        if (requestParameters.dateFrom !== undefined) {
            queryParameters['date_from'] = (requestParameters.dateFrom as any).toISOString();
        }

        if (requestParameters.dateTo !== undefined) {
            queryParameters['date_to'] = (requestParameters.dateTo as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{user_id}/plans`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 計画一覧
     */
    async apiV1UsersPlansIndex(requestParameters: ApiV1UsersPlansIndexRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: Array<Array<UsersPlansPlanListInner>>; }> {
        const response = await this.apiV1UsersPlansIndexRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 計画更新
     */
    async apiV1UsersPlansUpdateRaw(requestParameters: ApiV1UsersPlansUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersPlansPlan>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling apiV1UsersPlansUpdate.');
        }

        if (requestParameters.planId === null || requestParameters.planId === undefined) {
            throw new runtime.RequiredError('planId','Required parameter requestParameters.planId was null or undefined when calling apiV1UsersPlansUpdate.');
        }

        if (requestParameters.userPlanUpdateRequestBody === null || requestParameters.userPlanUpdateRequestBody === undefined) {
            throw new runtime.RequiredError('userPlanUpdateRequestBody','Required parameter requestParameters.userPlanUpdateRequestBody was null or undefined when calling apiV1UsersPlansUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{user_id}/plans/{plan_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"plan_id"}}`, encodeURIComponent(String(requestParameters.planId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserPlanUpdateRequestBodyToJSON(requestParameters.userPlanUpdateRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersPlansPlanFromJSON(jsonValue));
    }

    /**
     * 計画更新
     */
    async apiV1UsersPlansUpdate(requestParameters: ApiV1UsersPlansUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersPlansPlan> {
        const response = await this.apiV1UsersPlansUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
