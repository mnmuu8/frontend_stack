/* tslint:disable */
/* eslint-disable */
/**
 * Skill Climbing
 * スキルの積み上げアプリ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UserProfileImagesAttachRequestBody,
  UsersProfileImagesUploadUrl,
  UsersUser,
} from '../models';
import {
    UserProfileImagesAttachRequestBodyFromJSON,
    UserProfileImagesAttachRequestBodyToJSON,
    UsersProfileImagesUploadUrlFromJSON,
    UsersProfileImagesUploadUrlToJSON,
    UsersUserFromJSON,
    UsersUserToJSON,
} from '../models';

export interface ApiV1UsersProfileImagesAttachRequest {
    userId: number;
    userProfileImagesAttachRequestBody: UserProfileImagesAttachRequestBody;
}

export interface ApiV1UsersProfileImagesUploadUrlRequest {
    userId: number;
    filename: string;
    byteSize: number;
    contentType: string;
}

/**
 * 
 */
export class UserProfileImageApi extends runtime.BaseAPI {

    /**
     * ユーザープロフィール画像登録
     */
    async apiV1UsersProfileImagesAttachRaw(requestParameters: ApiV1UsersProfileImagesAttachRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersUser>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling apiV1UsersProfileImagesAttach.');
        }

        if (requestParameters.userProfileImagesAttachRequestBody === null || requestParameters.userProfileImagesAttachRequestBody === undefined) {
            throw new runtime.RequiredError('userProfileImagesAttachRequestBody','Required parameter requestParameters.userProfileImagesAttachRequestBody was null or undefined when calling apiV1UsersProfileImagesAttach.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{user_id}/profile_images/attach`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserProfileImagesAttachRequestBodyToJSON(requestParameters.userProfileImagesAttachRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersUserFromJSON(jsonValue));
    }

    /**
     * ユーザープロフィール画像登録
     */
    async apiV1UsersProfileImagesAttach(requestParameters: ApiV1UsersProfileImagesAttachRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersUser> {
        const response = await this.apiV1UsersProfileImagesAttachRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ユーザープロフィール画像アップロードURL取得
     */
    async apiV1UsersProfileImagesUploadUrlRaw(requestParameters: ApiV1UsersProfileImagesUploadUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersProfileImagesUploadUrl>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling apiV1UsersProfileImagesUploadUrl.');
        }

        if (requestParameters.filename === null || requestParameters.filename === undefined) {
            throw new runtime.RequiredError('filename','Required parameter requestParameters.filename was null or undefined when calling apiV1UsersProfileImagesUploadUrl.');
        }

        if (requestParameters.byteSize === null || requestParameters.byteSize === undefined) {
            throw new runtime.RequiredError('byteSize','Required parameter requestParameters.byteSize was null or undefined when calling apiV1UsersProfileImagesUploadUrl.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling apiV1UsersProfileImagesUploadUrl.');
        }

        const queryParameters: any = {};

        if (requestParameters.filename !== undefined) {
            queryParameters['filename'] = requestParameters.filename;
        }

        if (requestParameters.byteSize !== undefined) {
            queryParameters['byte_size'] = requestParameters.byteSize;
        }

        if (requestParameters.contentType !== undefined) {
            queryParameters['content_type'] = requestParameters.contentType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{user_id}/profile_images/upload_url`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersProfileImagesUploadUrlFromJSON(jsonValue));
    }

    /**
     * ユーザープロフィール画像アップロードURL取得
     */
    async apiV1UsersProfileImagesUploadUrl(requestParameters: ApiV1UsersProfileImagesUploadUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersProfileImagesUploadUrl> {
        const response = await this.apiV1UsersProfileImagesUploadUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
