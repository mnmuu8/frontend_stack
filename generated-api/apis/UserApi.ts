/* tslint:disable */
/* eslint-disable */
/**
 * Skill Climbing
 * スキルの積み上げアプリ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UserCreateRequestBody,
  UserUpdateRequestBody,
  UsersUser,
} from '../models';
import {
    UserCreateRequestBodyFromJSON,
    UserCreateRequestBodyToJSON,
    UserUpdateRequestBodyFromJSON,
    UserUpdateRequestBodyToJSON,
    UsersUserFromJSON,
    UsersUserToJSON,
} from '../models';

export interface ApiV1UsersCreateRequest {
    userCreateRequestBody: UserCreateRequestBody;
}

export interface ApiV1UsersShowRequest {
    userId: number;
}

export interface ApiV1UsersUpdateRequest {
    userId: number;
    userUpdateRequestBody: UserUpdateRequestBody;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * ユーザーデータ作成
     */
    async apiV1UsersCreateRaw(requestParameters: ApiV1UsersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersUser>> {
        if (requestParameters.userCreateRequestBody === null || requestParameters.userCreateRequestBody === undefined) {
            throw new runtime.RequiredError('userCreateRequestBody','Required parameter requestParameters.userCreateRequestBody was null or undefined when calling apiV1UsersCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserCreateRequestBodyToJSON(requestParameters.userCreateRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersUserFromJSON(jsonValue));
    }

    /**
     * ユーザーデータ作成
     */
    async apiV1UsersCreate(requestParameters: ApiV1UsersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersUser> {
        const response = await this.apiV1UsersCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ユーザーデータ詳細
     */
    async apiV1UsersShowRaw(requestParameters: ApiV1UsersShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersUser>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling apiV1UsersShow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersUserFromJSON(jsonValue));
    }

    /**
     * ユーザーデータ詳細
     */
    async apiV1UsersShow(requestParameters: ApiV1UsersShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersUser> {
        const response = await this.apiV1UsersShowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ユーザーデータ更新
     */
    async apiV1UsersUpdateRaw(requestParameters: ApiV1UsersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersUser>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling apiV1UsersUpdate.');
        }

        if (requestParameters.userUpdateRequestBody === null || requestParameters.userUpdateRequestBody === undefined) {
            throw new runtime.RequiredError('userUpdateRequestBody','Required parameter requestParameters.userUpdateRequestBody was null or undefined when calling apiV1UsersUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserUpdateRequestBodyToJSON(requestParameters.userUpdateRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersUserFromJSON(jsonValue));
    }

    /**
     * ユーザーデータ更新
     */
    async apiV1UsersUpdate(requestParameters: ApiV1UsersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersUser> {
        const response = await this.apiV1UsersUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
